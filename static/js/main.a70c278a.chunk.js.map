{"version":3,"sources":["hooks/useBasic.js","components/BasicForm.js","App.js","index.js"],"names":["initialState","value","isTouch","reducer","state","action","type","useBasic","validation","useReducer","input","dispatchInput","isEnteredInputValid","InputValid","name","isValid","hasError","change","event","target","blur","reset","BasicForm","props","s","trim","isNameValid","nameValid","nameChangeHandler","nameBlurHandler","nameReset","lastName","isLastNameValid","lastNameValid","lastNameChangeHandler","lastNameBlurHandler","lastNameReset","includes","email","isEmailValid","emailValid","emailChangeHandler","emailBlurHandler","emailReset","isFormValid","onSubmit","preventDefault","className","htmlFor","id","onChange","onBlur","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"yMACMA,EAAe,CACnBC,MAAO,GACPC,SAAS,GAELC,EAAU,SAACC,EAAOC,GACtB,MAAoB,WAAhBA,EAAOC,KACF,CAAEL,MAAOI,EAAOJ,MAAOC,QAASE,EAAMF,SAE3B,SAAhBG,EAAOC,KACF,CAAEL,MAAOG,EAAMH,MAAOC,SAAS,IAEpCG,EAAOC,KACFN,EAGV,EAwBcO,EAvBE,SAACC,GAChB,MAA+BC,qBAAWN,EAASH,GAAnD,mBAAOU,EAAP,KAAcC,EAAd,KAEMC,EAAsBJ,EAAWE,EAAMT,OACvCY,GAAcD,GAAuBF,EAAMR,QAUjD,MAAO,CACLY,KAAMJ,EAAMT,MACZc,QAASH,EACTI,SAAUH,EACVI,OAbyB,SAACC,GAC1BP,EAAc,CAAEL,KAAM,SAAUL,MAAOiB,EAAMC,OAAOlB,OACrD,EAYCmB,KAXuB,WACvBT,EAAc,CAAEL,KAAM,QACvB,EAUCe,MATY,WACZV,EAAc,CAAEL,KAAM,SACvB,EASF,E,OC8CcgB,EAnFG,SAACC,GACjB,MAOIhB,GAAS,SAACiB,GAAD,MAAoB,KAAbA,EAAEC,MAAT,IANLX,EADR,EACEA,KACSY,EAFX,EAEEX,QACUY,EAHZ,EAGEX,SACQY,EAJV,EAIEX,OACMY,EALR,EAKET,KACOU,EANT,EAMET,MAEF,EAOId,GAAS,SAACiB,GAAD,MAAoB,KAAbA,EAAEC,MAAT,IANLM,EADR,EACEjB,KACSkB,EAFX,EAEEjB,QACUkB,EAHZ,EAGEjB,SACQkB,EAJV,EAIEjB,OACMkB,EALR,EAKEf,KACOgB,EANT,EAMEf,MAEF,EAOId,GAAS,SAACiB,GAAD,MAAoB,KAAbA,EAAEC,QAAiBD,EAAEa,SAAS,MAAQb,EAAEa,SAAS,IAAxD,IANLC,EADR,EACExB,KACSyB,EAFX,EAEExB,QACUyB,EAHZ,EAGExB,SACQyB,EAJV,EAIExB,OACMyB,EALR,EAKEtB,KACOuB,EANT,EAMEtB,MAGEuB,GAAc,EACdL,GAAgBP,GAAmBN,IACrCkB,GAAc,GAShB,OACE,uBAAMC,SARkB,SAAC3B,GACzBA,EAAM4B,iBACDF,IACLd,IACAM,IACAO,IACD,EAEC,UACE,sBAAKI,UAAU,gBAAf,UACE,sBAAKA,UAAS,uBAAkBpB,GAAa,WAA7C,UACE,uBAAOqB,QAAQ,OAAf,wBACA,uBACE1C,KAAK,OACL2C,GAAG,OACHhD,MAAOa,EACPoC,SAAUtB,EACVuB,OAAQtB,IAETF,GAAa,mBAAGoB,UAAU,cAAb,uCAEhB,sBAAKA,UAAS,uBAAkBd,GAAiB,WAAjD,UACE,uBAAOe,QAAQ,OAAf,uBACA,uBACE1C,KAAK,OACL2C,GAAG,OACHhD,MAAO8B,EACPmB,SAAUhB,EACViB,OAAQhB,IAETF,GACC,mBAAGc,UAAU,cAAb,8CAIN,sBAAKA,UAAS,uBAAkBP,GAAc,WAA9C,UACE,uBAAOQ,QAAQ,OAAf,4BACA,uBACE1C,KAAK,OACL2C,GAAG,OACHhD,MAAOqC,EACPY,SAAUT,EACVU,OAAQT,IAETF,GAAc,mBAAGO,UAAU,cAAb,wCAEjB,qBAAKA,UAAU,eAAf,SACE,wBAAQA,UAAS,WAAMH,GAAe,YAAtC,wBAIP,EC1EcQ,MARf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,cAAC,EAAD,KAGL,ECFYM,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,cAAC,EAAD,I","file":"static/js/main.a70c278a.chunk.js","sourcesContent":["import { useReducer } from \"react\";\r\nconst initialState = {\r\n  value: \"\",\r\n  isTouch: false,\r\n};\r\nconst reducer = (state, action) => {\r\n  if (action.type === \"CHANGE\") {\r\n    return { value: action.value, isTouch: state.isTouch };\r\n  }\r\n  if (action.type === \"BLUR\") {\r\n    return { value: state.value, isTouch: true };\r\n  }\r\n  if (action.type === \"RESET\") {\r\n    return initialState;\r\n  }\r\n  return initialState;\r\n};\r\nconst useBasic = (validation) => {\r\n  const [input, dispatchInput] = useReducer(reducer, initialState);\r\n\r\n  const isEnteredInputValid = validation(input.value);\r\n  const InputValid = !isEnteredInputValid && input.isTouch;\r\n  const inputChangeHandler = (event) => {\r\n    dispatchInput({ type: \"CHANGE\", value: event.target.value });\r\n  };\r\n  const inputBlurHandler = () => {\r\n    dispatchInput({ type: \"BLUR\" });\r\n  };\r\n  const reset = () => {\r\n    dispatchInput({ type: \"RESET\" });\r\n  };\r\n  return {\r\n    name: input.value,\r\n    isValid: isEnteredInputValid,\r\n    hasError: InputValid,\r\n    change: inputChangeHandler,\r\n    blur: inputBlurHandler,\r\n    reset,\r\n  };\r\n};\r\nexport default useBasic;\r\n","import React, { useState } from \"react\";\nimport useBasic from \"../hooks/useBasic\";\nconst BasicForm = (props) => {\n  const {\n    name: name,\n    isValid: isNameValid,\n    hasError: nameValid,\n    change: nameChangeHandler,\n    blur: nameBlurHandler,\n    reset: nameReset,\n  } = useBasic((s) => s.trim() !== \"\");\n  const {\n    name: lastName,\n    isValid: isLastNameValid,\n    hasError: lastNameValid,\n    change: lastNameChangeHandler,\n    blur: lastNameBlurHandler,\n    reset: lastNameReset,\n  } = useBasic((s) => s.trim() !== \"\");\n  const {\n    name: email,\n    isValid: isEmailValid,\n    hasError: emailValid,\n    change: emailChangeHandler,\n    blur: emailBlurHandler,\n    reset: emailReset,\n  } = useBasic((s) => s.trim() !== \"\" && s.includes(\"@\") && s.includes(\".\"));\n\n  let isFormValid = false;\n  if (isEmailValid && isLastNameValid && isNameValid) {\n    isFormValid = true;\n  }\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n    if (!isFormValid) return;\n    nameReset();\n    lastNameReset();\n    emailReset();\n  };\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className=\"control-group\">\n        <div className={`form-control ${nameValid && \"invalid\"}`}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={name}\n            onChange={nameChangeHandler}\n            onBlur={nameBlurHandler}\n          />\n          {nameValid && <p className=\"error-text \">name must not be empty</p>}\n        </div>\n        <div className={`form-control ${lastNameValid && \"invalid\"}`}>\n          <label htmlFor=\"name\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={lastName}\n            onChange={lastNameChangeHandler}\n            onBlur={lastNameBlurHandler}\n          />\n          {lastNameValid && (\n            <p className=\"error-text \">lastName must not be empty</p>\n          )}\n        </div>\n      </div>\n      <div className={`form-control ${emailValid && \"invalid\"}`}>\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={email}\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n        />\n        {emailValid && <p className=\"error-text \">email should be correct</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button className={`${!isFormValid && \"disabled\"}`}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n","import BasicForm from \"./components/BasicForm\";\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}